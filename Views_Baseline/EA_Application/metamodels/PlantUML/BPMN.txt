@startuml
class DocumentRoot [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//DocumentRoot]] {
	mixed: EFeatureMapEntry[]
}
class Activity [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Activity]] {
	completionQuantity: EInt
	isForCompensation: EBoolean
	startQuantity: EInt
}
enum AdHocOrdering [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//AdHocOrdering]] {
	Parallel: Parallel
	Sequential: Sequential
}
class AdHocSubProcess [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//AdHocSubProcess]] {
	cancelRemainingInstances: EBoolean
	ordering: AdHocOrdering
}
class Artifact [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Artifact]] {
}
class Assignment [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Assignment]] {
}
class Association [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Association]] {
	associationDirection: AssociationDirection
}
enum AssociationDirection [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//AssociationDirection]] {
	None: None
	One: One
	Both: Both
}
class Auditing [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Auditing]] {
}
class BaseElement [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//BaseElement]] {
	id: EString
	anyAttribute: EFeatureMapEntry[]
}
class BoundaryEvent [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//BoundaryEvent]] {
	cancelActivity: EBoolean
}
class BusinessRuleTask [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//BusinessRuleTask]] {
	implementation: EString
}
class CallActivity [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//CallActivity]] {
}
class CallChoreography [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//CallChoreography]] {
}
class CallConversation [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//CallConversation]] {
}
class CallableElement [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//CallableElement]] {
	name: EString
}
class CancelEventDefinition [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//CancelEventDefinition]] {
}
abstract class CatchEvent [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//CatchEvent]] {
	parallelMultiple: EBoolean
}
class Category [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Category]] {
	name: EString
}
class CategoryValue [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//CategoryValue]] {
	value: EString
}
class Choreography [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Choreography]] {
}
abstract class ChoreographyActivity [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//ChoreographyActivity]] {
	loopType: ChoreographyLoopType
}
enum ChoreographyLoopType [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//ChoreographyLoopType]] {
	None: None
	Standard: Standard
	MultiInstanceSequential: MultiInstanceSequential
	MultiInstanceParallel: MultiInstanceParallel
}
class ChoreographyTask [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//ChoreographyTask]] {
}
class Collaboration [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Collaboration]] {
	isClosed: EBoolean
	name: EString
}
class CompensateEventDefinition [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//CompensateEventDefinition]] {
	waitForCompletion: EBoolean
}
class ComplexBehaviorDefinition [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//ComplexBehaviorDefinition]] {
}
class ComplexGateway [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//ComplexGateway]] {
}
class ConditionalEventDefinition [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//ConditionalEventDefinition]] {
}
class Conversation [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Conversation]] {
}
class ConversationAssociation [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//ConversationAssociation]] {
}
class ConversationLink [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//ConversationLink]] {
	name: EString
}
class ConversationNode [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//ConversationNode]] {
	name: EString
}
class CorrelationKey [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//CorrelationKey]] {
	name: EString
}
class CorrelationProperty [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//CorrelationProperty]] {
	name: EString
}
class CorrelationPropertyBinding [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//CorrelationPropertyBinding]] {
}
class CorrelationPropertyRetrievalExpression [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//CorrelationPropertyRetrievalExpression]] {
}
class CorrelationSubscription [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//CorrelationSubscription]] {
}
class DataAssociation [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//DataAssociation]] {
}
class DataInput [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//DataInput]] {
	isCollection: EBoolean
	name: EString
}
class DataInputAssociation [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//DataInputAssociation]] {
}
class DataObject [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//DataObject]] {
	isCollection: EBoolean
}
class DataObjectReference [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//DataObjectReference]] {
}
class DataOutput [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//DataOutput]] {
	isCollection: EBoolean
	name: EString
}
class DataOutputAssociation [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//DataOutputAssociation]] {
}
class DataState [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//DataState]] {
	name: EString
}
class DataStore [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//DataStore]] {
	capacity: EInt
	isUnlimited: EBoolean
	name: EString
}
class DataStoreReference [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//DataStoreReference]] {
}
class Definitions [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Definitions]] {
	exporter: EString
	exporterVersion: EString
	expressionLanguage: EString
	name: EString
	targetNamespace: EString
	typeLanguage: EString
}
class Documentation [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Documentation]] {
	mixed: EFeatureMapEntry[]
	/ text: EString
	textFormat: EString
}
class EndEvent [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//EndEvent]] {
}
class EndPoint [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//EndPoint]] {
}
class Error [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Error]] {
	errorCode: EString
	name: EString
}
class ErrorEventDefinition [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//ErrorEventDefinition]] {
}
class Escalation [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Escalation]] {
	escalationCode: EString
	name: EString
}
class EscalationEventDefinition [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//EscalationEventDefinition]] {
}
abstract class Event [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Event]] {
}
class EventBasedGateway [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//EventBasedGateway]] {
	eventGatewayType: EventBasedGatewayType
	instantiate: EBoolean
}
enum EventBasedGatewayType [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//EventBasedGatewayType]] {
	Parallel: Parallel
	Exclusive: Exclusive
}
class EventDefinition [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//EventDefinition]] {
}
class ExclusiveGateway [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//ExclusiveGateway]] {
}
class Expression [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Expression]] {
}
class Extension [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Extension]] {
	mustUnderstand: EBoolean
	xsdDefinition: QName
}
class ExtensionAttributeDefinition [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//ExtensionAttributeDefinition]] {
	name: EString
	type: EString
	isReference: EBoolean
}
class ExtensionAttributeValue [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//ExtensionAttributeValue]] {
	value: EFeatureMapEntry[]
}
class ExtensionDefinition [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//ExtensionDefinition]] {
	name: EString
}
abstract class FlowElement [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//FlowElement]] {
	name: EString
}
abstract class FlowElementsContainer [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//FlowElementsContainer]] {
}
abstract class FlowNode [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//FlowNode]] {
}
class FormalExpression [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//FormalExpression]] {
	mixed: EFeatureMapEntry[]
	/ body: EString
	language: EString
}
abstract class Gateway [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Gateway]] {
	gatewayDirection: GatewayDirection
}
enum GatewayDirection [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//GatewayDirection]] {
	Unspecified: Unspecified
	Converging: Converging
	Diverging: Diverging
	Mixed: Mixed
}
class GlobalBusinessRuleTask [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//GlobalBusinessRuleTask]] {
	implementation: EString
}
class GlobalChoreographyTask [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//GlobalChoreographyTask]] {
}
class GlobalConversation [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//GlobalConversation]] {
}
class GlobalManualTask [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//GlobalManualTask]] {
}
class GlobalScriptTask [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//GlobalScriptTask]] {
	script: EString
	scriptLanguage: EString
}
class GlobalTask [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//GlobalTask]] {
}
class GlobalUserTask [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//GlobalUserTask]] {
	implementation: EString
}
class Group [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Group]] {
}
class HumanPerformer [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//HumanPerformer]] {
}
class ImplicitThrowEvent [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//ImplicitThrowEvent]] {
}
class Import [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Import]] {
	importType: EString
	location: EString
	namespace: EString
}
class InclusiveGateway [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//InclusiveGateway]] {
}
class InputOutputBinding [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//InputOutputBinding]] {
}
class InputOutputSpecification [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//InputOutputSpecification]] {
}
class InputSet [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//InputSet]] {
	name: EString
}
class InteractionNode [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//InteractionNode]] {
}
class Interface [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Interface]] {
	name: EString
}
class IntermediateCatchEvent [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//IntermediateCatchEvent]] {
}
class IntermediateThrowEvent [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//IntermediateThrowEvent]] {
}
class ItemAwareElement [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//ItemAwareElement]] {
}
class ItemDefinition [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//ItemDefinition]] {
	isCollection: EBoolean
	itemKind: ItemKind
}
enum ItemKind [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//ItemKind]] {
	Physical: Physical
	Information: Information
}
class Lane [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Lane]] {
	name: EString
}
class LaneSet [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//LaneSet]] {
	name: EString
}
class LinkEventDefinition [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//LinkEventDefinition]] {
	name: EString
}
abstract class LoopCharacteristics [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//LoopCharacteristics]] {
}
class ManualTask [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//ManualTask]] {
}
class Message [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Message]] {
	name: EString
}
class MessageEventDefinition [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//MessageEventDefinition]] {
}
class MessageFlow [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//MessageFlow]] {
	name: EString
}
class MessageFlowAssociation [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//MessageFlowAssociation]] {
}
class Monitoring [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Monitoring]] {
}
enum MultiInstanceBehavior [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//MultiInstanceBehavior]] {
	None: None
	One: One
	All: All
	Complex: Complex
}
class MultiInstanceLoopCharacteristics [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//MultiInstanceLoopCharacteristics]] {
	behavior: MultiInstanceBehavior
	isSequential: EBoolean
}
class Operation [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Operation]] {
	name: EString
}
class OutputSet [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//OutputSet]] {
	name: EString
}
class ParallelGateway [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//ParallelGateway]] {
}
class Participant [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Participant]] {
	name: EString
}
class ParticipantAssociation [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//ParticipantAssociation]] {
}
class ParticipantMultiplicity [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//ParticipantMultiplicity]] {
	maximum: EInt
	minimum: EInt
}
class PartnerEntity [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//PartnerEntity]] {
	name: EString
}
class PartnerRole [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//PartnerRole]] {
	name: EString
}
class Performer [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Performer]] {
}
class PotentialOwner [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//PotentialOwner]] {
}
class Process [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Process]] {
	isClosed: EBoolean
	isExecutable: EBoolean
	processType: ProcessType
}
enum ProcessType [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//ProcessType]] {
	None: None
	Public: Public
	Private: Private
}
class Property [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Property]] {
	name: EString
}
class ReceiveTask [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//ReceiveTask]] {
	implementation: EString
	instantiate: EBoolean
}
class Relationship [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Relationship]] {
	direction: RelationshipDirection
	type: EString
}
enum RelationshipDirection [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//RelationshipDirection]] {
	None: None
	Forward: Forward
	Backward: Backward
	Both: Both
}
class Rendering [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Rendering]] {
}
class Resource [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Resource]] {
	name: EString
}
class ResourceAssignmentExpression [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//ResourceAssignmentExpression]] {
}
class ResourceParameter [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//ResourceParameter]] {
	isRequired: EBoolean
	name: EString
}
class ResourceParameterBinding [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//ResourceParameterBinding]] {
}
class ResourceRole [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//ResourceRole]] {
	name: EString
}
class RootElement [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//RootElement]] {
}
class ScriptTask [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//ScriptTask]] {
	script: EString
	scriptFormat: EString
}
class SendTask [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//SendTask]] {
	implementation: EString
}
class SequenceFlow [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//SequenceFlow]] {
	isImmediate: EBoolean
}
class ServiceTask [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//ServiceTask]] {
	implementation: EString
}
class Signal [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Signal]] {
	name: EString
}
class SignalEventDefinition [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//SignalEventDefinition]] {
}
class StandardLoopCharacteristics [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//StandardLoopCharacteristics]] {
	loopMaximum: Int
	testBefore: EBoolean
}
class StartEvent [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//StartEvent]] {
	isInterrupting: EBoolean
}
class SubChoreography [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//SubChoreography]] {
}
class SubConversation [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//SubConversation]] {
}
class SubProcess [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//SubProcess]] {
	triggeredByEvent: EBoolean
}
class Task [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Task]] {
}
class TerminateEventDefinition [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//TerminateEventDefinition]] {
}
class TextAnnotation [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//TextAnnotation]] {
	text: EString
	textFormat: EString
}
abstract class ThrowEvent [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//ThrowEvent]] {
}
class TimerEventDefinition [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//TimerEventDefinition]] {
}
class Transaction [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//Transaction]] {
	protocol: EString
	method: EString
}
class UserTask [[http://www.omg.org/spec/BPMN/20100524/MODEL-XMI#//UserTask]] {
	implementation: EString
}
FlowNode <|-- Activity
SubProcess <|-- AdHocSubProcess
BaseElement <|-- Artifact
BaseElement <|-- Assignment
Artifact <|-- Association
BaseElement <|-- Auditing
CatchEvent <|-- BoundaryEvent
Task <|-- BusinessRuleTask
Activity <|-- CallActivity
InteractionNode <|-- CallActivity
ChoreographyActivity <|-- CallChoreography
ConversationNode <|-- CallConversation
RootElement <|-- CallableElement
EventDefinition <|-- CancelEventDefinition
Event <|-- CatchEvent
RootElement <|-- Category
BaseElement <|-- CategoryValue
Collaboration <|-- Choreography
FlowElementsContainer <|-- Choreography
FlowNode <|-- ChoreographyActivity
ChoreographyActivity <|-- ChoreographyTask
RootElement <|-- Collaboration
EventDefinition <|-- CompensateEventDefinition
BaseElement <|-- ComplexBehaviorDefinition
Gateway <|-- ComplexGateway
EventDefinition <|-- ConditionalEventDefinition
ConversationNode <|-- Conversation
BaseElement <|-- ConversationAssociation
BaseElement <|-- ConversationLink
BaseElement <|-- ConversationNode
InteractionNode <|-- ConversationNode
BaseElement <|-- CorrelationKey
RootElement <|-- CorrelationProperty
BaseElement <|-- CorrelationPropertyBinding
BaseElement <|-- CorrelationPropertyRetrievalExpression
BaseElement <|-- CorrelationSubscription
BaseElement <|-- DataAssociation
ItemAwareElement <|-- DataInput
DataAssociation <|-- DataInputAssociation
FlowElement <|-- DataObject
ItemAwareElement <|-- DataObject
FlowElement <|-- DataObjectReference
ItemAwareElement <|-- DataObjectReference
ItemAwareElement <|-- DataOutput
DataAssociation <|-- DataOutputAssociation
BaseElement <|-- DataState
ItemAwareElement <|-- DataStore
RootElement <|-- DataStore
FlowElement <|-- DataStoreReference
ItemAwareElement <|-- DataStoreReference
BaseElement <|-- Definitions
BaseElement <|-- Documentation
ThrowEvent <|-- EndEvent
RootElement <|-- EndPoint
RootElement <|-- Error
EventDefinition <|-- ErrorEventDefinition
RootElement <|-- Escalation
EventDefinition <|-- EscalationEventDefinition
FlowNode <|-- Event
InteractionNode <|-- Event
Gateway <|-- EventBasedGateway
RootElement <|-- EventDefinition
Gateway <|-- ExclusiveGateway
BaseElement <|-- Expression
BaseElement <|-- FlowElement
BaseElement <|-- FlowElementsContainer
FlowElement <|-- FlowNode
Expression <|-- FormalExpression
FlowNode <|-- Gateway
GlobalTask <|-- GlobalBusinessRuleTask
Choreography <|-- GlobalChoreographyTask
Collaboration <|-- GlobalConversation
GlobalTask <|-- GlobalManualTask
GlobalTask <|-- GlobalScriptTask
CallableElement <|-- GlobalTask
GlobalTask <|-- GlobalUserTask
Artifact <|-- Group
Performer <|-- HumanPerformer
ThrowEvent <|-- ImplicitThrowEvent
Gateway <|-- InclusiveGateway
BaseElement <|-- InputOutputBinding
BaseElement <|-- InputOutputSpecification
BaseElement <|-- InputSet
RootElement <|-- Interface
CatchEvent <|-- IntermediateCatchEvent
ThrowEvent <|-- IntermediateThrowEvent
BaseElement <|-- ItemAwareElement
RootElement <|-- ItemDefinition
BaseElement <|-- Lane
BaseElement <|-- LaneSet
EventDefinition <|-- LinkEventDefinition
BaseElement <|-- LoopCharacteristics
Task <|-- ManualTask
RootElement <|-- Message
EventDefinition <|-- MessageEventDefinition
BaseElement <|-- MessageFlow
BaseElement <|-- MessageFlowAssociation
BaseElement <|-- Monitoring
LoopCharacteristics <|-- MultiInstanceLoopCharacteristics
BaseElement <|-- Operation
BaseElement <|-- OutputSet
Gateway <|-- ParallelGateway
BaseElement <|-- Participant
InteractionNode <|-- Participant
BaseElement <|-- ParticipantAssociation
BaseElement <|-- ParticipantMultiplicity
RootElement <|-- PartnerEntity
RootElement <|-- PartnerRole
ResourceRole <|-- Performer
HumanPerformer <|-- PotentialOwner
CallableElement <|-- Process
FlowElementsContainer <|-- Process
ItemAwareElement <|-- Property
Task <|-- ReceiveTask
BaseElement <|-- Relationship
BaseElement <|-- Rendering
RootElement <|-- Resource
BaseElement <|-- ResourceAssignmentExpression
BaseElement <|-- ResourceParameter
BaseElement <|-- ResourceParameterBinding
BaseElement <|-- ResourceRole
BaseElement <|-- RootElement
Task <|-- ScriptTask
Task <|-- SendTask
FlowElement <|-- SequenceFlow
Task <|-- ServiceTask
RootElement <|-- Signal
EventDefinition <|-- SignalEventDefinition
LoopCharacteristics <|-- StandardLoopCharacteristics
CatchEvent <|-- StartEvent
ChoreographyActivity <|-- SubChoreography
FlowElementsContainer <|-- SubChoreography
ConversationNode <|-- SubConversation
Activity <|-- SubProcess
FlowElementsContainer <|-- SubProcess
InteractionNode <|-- SubProcess
Activity <|-- Task
InteractionNode <|-- Task
EventDefinition <|-- TerminateEventDefinition
Artifact <|-- TextAnnotation
Event <|-- ThrowEvent
EventDefinition <|-- TimerEventDefinition
SubProcess <|-- Transaction
Task <|-- UserTask
DocumentRoot *--> "xMLNSPrefixMap *" EStringToStringMapEntry
DocumentRoot *--> "xSISchemaLocation *" EStringToStringMapEntry
DocumentRoot *--> "/ activity" Activity
DocumentRoot *--> "/ adHocSubProcess" AdHocSubProcess
DocumentRoot *--> "/ flowElement" FlowElement
DocumentRoot *--> "/ artifact" Artifact
DocumentRoot *--> "/ assignment" Assignment
DocumentRoot *--> "/ association" Association
DocumentRoot *--> "/ auditing" Auditing
DocumentRoot *--> "/ baseElement" BaseElement
DocumentRoot *--> "/ baseElementWithMixedContent" BaseElement
DocumentRoot *--> "/ boundaryEvent" BoundaryEvent
DocumentRoot *--> "/ businessRuleTask" BusinessRuleTask
DocumentRoot *--> "/ callableElement" CallableElement
DocumentRoot *--> "/ callActivity" CallActivity
DocumentRoot *--> "/ callChoreography" CallChoreography
DocumentRoot *--> "/ callConversation" CallConversation
DocumentRoot *--> "/ conversationNode" ConversationNode
DocumentRoot *--> "/ cancelEventDefinition" CancelEventDefinition
DocumentRoot *--> "/ eventDefinition" EventDefinition
DocumentRoot *--> "/ rootElement" RootElement
DocumentRoot *--> "/ catchEvent" CatchEvent
DocumentRoot *--> "/ category" Category
DocumentRoot *--> "/ categoryValue" CategoryValue
DocumentRoot *--> "/ choreography" Choreography
DocumentRoot *--> "/ collaboration" Collaboration
DocumentRoot *--> "/ choreographyActivity" ChoreographyActivity
DocumentRoot *--> "/ choreographyTask" ChoreographyTask
DocumentRoot *--> "/ compensateEventDefinition" CompensateEventDefinition
DocumentRoot *--> "/ complexBehaviorDefinition" ComplexBehaviorDefinition
DocumentRoot *--> "/ complexGateway" ComplexGateway
DocumentRoot *--> "/ conditionalEventDefinition" ConditionalEventDefinition
DocumentRoot *--> "/ conversation" Conversation
DocumentRoot *--> "/ conversationAssociation" ConversationAssociation
DocumentRoot *--> "/ conversationLink" ConversationLink
DocumentRoot *--> "/ correlationKey" CorrelationKey
DocumentRoot *--> "/ correlationProperty" CorrelationProperty
DocumentRoot *--> "/ correlationPropertyBinding" CorrelationPropertyBinding
DocumentRoot *--> "/ correlationPropertyRetrievalExpression" CorrelationPropertyRetrievalExpression
DocumentRoot *--> "/ correlationSubscription" CorrelationSubscription
DocumentRoot *--> "/ dataAssociation" DataAssociation
DocumentRoot *--> "/ dataInput" DataInput
DocumentRoot *--> "/ dataInputAssociation" DataInputAssociation
DocumentRoot *--> "/ dataObject" DataObject
DocumentRoot *--> "/ dataObjectReference" DataObjectReference
DocumentRoot *--> "/ dataOutput" DataOutput
DocumentRoot *--> "/ dataOutputAssociation" DataOutputAssociation
DocumentRoot *--> "/ dataState" DataState
DocumentRoot *--> "/ dataStore" DataStore
DocumentRoot *--> "/ dataStoreReference" DataStoreReference
DocumentRoot *--> "/ definitions" Definitions
DocumentRoot *--> "/ documentation" Documentation
DocumentRoot *--> "/ endEvent" EndEvent
DocumentRoot *--> "/ endPoint" EndPoint
DocumentRoot *--> "/ error" Error
DocumentRoot *--> "/ errorEventDefinition" ErrorEventDefinition
DocumentRoot *--> "/ escalation" Escalation
DocumentRoot *--> "/ escalationEventDefinition" EscalationEventDefinition
DocumentRoot *--> "/ event" Event
DocumentRoot *--> "/ eventBasedGateway" EventBasedGateway
DocumentRoot *--> "/ exclusiveGateway" ExclusiveGateway
DocumentRoot *--> "/ expression" Expression
DocumentRoot *--> "/ extension" Extension
DocumentRoot *--> "/ extensionElements" ExtensionAttributeValue
DocumentRoot *--> "/ flowNode" FlowNode
DocumentRoot *--> "/ formalExpression" FormalExpression
DocumentRoot *--> "/ gateway" Gateway
DocumentRoot *--> "/ globalBusinessRuleTask" GlobalBusinessRuleTask
DocumentRoot *--> "/ globalChoreographyTask" GlobalChoreographyTask
DocumentRoot *--> "/ globalConversation" GlobalConversation
DocumentRoot *--> "/ globalManualTask" GlobalManualTask
DocumentRoot *--> "/ globalScriptTask" GlobalScriptTask
DocumentRoot *--> "/ globalTask" GlobalTask
DocumentRoot *--> "/ globalUserTask" GlobalUserTask
DocumentRoot *--> "/ group" Group
DocumentRoot *--> "/ humanPerformer" HumanPerformer
DocumentRoot *--> "/ performer" Performer
DocumentRoot *--> "/ resourceRole" ResourceRole
DocumentRoot *--> "/ implicitThrowEvent" ImplicitThrowEvent
DocumentRoot *--> "/ import" Import
DocumentRoot *--> "/ inclusiveGateway" InclusiveGateway
DocumentRoot *--> "/ inputSet" InputSet
DocumentRoot *--> "/ interface" Interface
DocumentRoot *--> "/ intermediateCatchEvent" IntermediateCatchEvent
DocumentRoot *--> "/ intermediateThrowEvent" IntermediateThrowEvent
DocumentRoot *--> "/ ioBinding" InputOutputBinding
DocumentRoot *--> "/ ioSpecification" InputOutputSpecification
DocumentRoot *--> "/ itemDefinition" ItemDefinition
DocumentRoot *--> "/ lane" Lane
DocumentRoot *--> "/ laneSet" LaneSet
DocumentRoot *--> "/ linkEventDefinition" LinkEventDefinition
DocumentRoot *--> "/ loopCharacteristics" LoopCharacteristics
DocumentRoot *--> "/ manualTask" ManualTask
DocumentRoot *--> "/ message" Message
DocumentRoot *--> "/ messageEventDefinition" MessageEventDefinition
DocumentRoot *--> "/ messageFlow" MessageFlow
DocumentRoot *--> "/ messageFlowAssociation" MessageFlowAssociation
DocumentRoot *--> "/ monitoring" Monitoring
DocumentRoot *--> "/ multiInstanceLoopCharacteristics" MultiInstanceLoopCharacteristics
DocumentRoot *--> "/ operation" Operation
DocumentRoot *--> "/ outputSet" OutputSet
DocumentRoot *--> "/ parallelGateway" ParallelGateway
DocumentRoot *--> "/ participant" Participant
DocumentRoot *--> "/ participantAssociation" ParticipantAssociation
DocumentRoot *--> "/ participantMultiplicity" ParticipantMultiplicity
DocumentRoot *--> "/ partnerEntity" PartnerEntity
DocumentRoot *--> "/ partnerRole" PartnerRole
DocumentRoot *--> "/ potentialOwner" PotentialOwner
DocumentRoot *--> "/ process" Process
DocumentRoot *--> "/ property" Property
DocumentRoot *--> "/ receiveTask" ReceiveTask
DocumentRoot *--> "/ relationship" Relationship
DocumentRoot *--> "/ rendering" Rendering
DocumentRoot *--> "/ resource" Resource
DocumentRoot *--> "/ resourceAssignmentExpression" ResourceAssignmentExpression
DocumentRoot *--> "/ resourceParameter" ResourceParameter
DocumentRoot *--> "/ resourceParameterBinding" ResourceParameterBinding
DocumentRoot *--> "/ script" EObject
DocumentRoot *--> "/ scriptTask" ScriptTask
DocumentRoot *--> "/ sendTask" SendTask
DocumentRoot *--> "/ sequenceFlow" SequenceFlow
DocumentRoot *--> "/ serviceTask" ServiceTask
DocumentRoot *--> "/ signal" Signal
DocumentRoot *--> "/ signalEventDefinition" SignalEventDefinition
DocumentRoot *--> "/ standardLoopCharacteristics" StandardLoopCharacteristics
DocumentRoot *--> "/ startEvent" StartEvent
DocumentRoot *--> "/ subChoreography" SubChoreography
DocumentRoot *--> "/ subConversation" SubConversation
DocumentRoot *--> "/ subProcess" SubProcess
DocumentRoot *--> "/ task" Task
DocumentRoot *--> "/ terminateEventDefinition" TerminateEventDefinition
DocumentRoot *--> "/ text" EObject
DocumentRoot *--> "/ textAnnotation" TextAnnotation
DocumentRoot *--> "/ throwEvent" ThrowEvent
DocumentRoot *--> "/ timerEventDefinition" TimerEventDefinition
DocumentRoot *--> "/ transaction" Transaction
DocumentRoot *--> "/ userTask" UserTask
Activity *--> "ioSpecification" InputOutputSpecification
Activity "attachedToRef" -- "/ boundaryEventRefs *" BoundaryEvent
Activity *--> "properties *" Property
Activity *--> "dataInputAssociations *" DataInputAssociation
Activity *--> "dataOutputAssociations *" DataOutputAssociation
Activity *--> "resources *" ResourceRole
Activity *--> "loopCharacteristics" LoopCharacteristics
Activity --> "default" SequenceFlow
AdHocSubProcess *--> "completionCondition" Expression
Assignment *--> "from" Expression
Assignment *--> "to" Expression
Association --> "sourceRef" BaseElement
Association --> "targetRef" BaseElement
BaseElement *--> "extensionValues *" ExtensionAttributeValue
BaseElement *--> "documentation *" Documentation
BaseElement --> "extensionDefinitions *" ExtensionDefinition
CallActivity --> "calledElementRef" CallableElement
CallChoreography *--> "participantAssociations *" ParticipantAssociation
CallChoreography --> "calledChoreographyRef" Choreography
CallConversation *--> "participantAssociations *" ParticipantAssociation
CallConversation --> "calledCollaborationRef" Collaboration
CallableElement --> "supportedInterfaceRefs *" Interface
CallableElement *--> "ioSpecification" InputOutputSpecification
CallableElement *--> "ioBinding *" InputOutputBinding
CatchEvent *--> "dataOutputs *" DataOutput
CatchEvent *--> "dataOutputAssociation *" DataOutputAssociation
CatchEvent *--> "outputSet" OutputSet
CatchEvent *--> "eventDefinitions *" EventDefinition
CatchEvent --> "eventDefinitionRefs *" EventDefinition
Category *--> "categoryValue *" CategoryValue
CategoryValue --> "/ categorizedFlowElements *" FlowElement
ChoreographyActivity --> "participantRefs *" Participant
ChoreographyActivity *--> "correlationKeys *" CorrelationKey
ChoreographyActivity --> "initiatingParticipantRef" Participant
ChoreographyTask --> "messageFlowRef *" MessageFlow
Collaboration *--> "participants *" Participant
Collaboration *--> "messageFlows *" MessageFlow
Collaboration *--> "artifacts *" Artifact
Collaboration *--> "conversations *" ConversationNode
Collaboration *--> "conversationAssociations *" ConversationAssociation
Collaboration *--> "participantAssociations *" ParticipantAssociation
Collaboration *--> "messageFlowAssociations *" MessageFlowAssociation
Collaboration *--> "correlationKeys *" CorrelationKey
Collaboration --> "choreographyRef *" Choreography
Collaboration *--> "conversationLinks *" ConversationLink
CompensateEventDefinition --> "activityRef" Activity
ComplexBehaviorDefinition *--> "condition" FormalExpression
ComplexBehaviorDefinition *--> "event" ImplicitThrowEvent
ComplexGateway *--> "activationCondition" Expression
ComplexGateway --> "default" SequenceFlow
ConditionalEventDefinition *--> "condition" Expression
ConversationAssociation --> "innerConversationNodeRef" ConversationNode
ConversationAssociation --> "outerConversationNodeRef" ConversationNode
ConversationLink --> "sourceRef" InteractionNode
ConversationLink --> "targetRef" InteractionNode
ConversationNode --> "participantRefs *" Participant
ConversationNode --> "messageFlowRefs *" MessageFlow
ConversationNode *--> "correlationKeys *" CorrelationKey
CorrelationKey --> "correlationPropertyRef *" CorrelationProperty
CorrelationProperty *--> "correlationPropertyRetrievalExpression *" CorrelationPropertyRetrievalExpression
CorrelationProperty --> "type" ItemDefinition
CorrelationPropertyBinding *--> "dataPath" FormalExpression
CorrelationPropertyBinding --> "correlationPropertyRef" CorrelationProperty
CorrelationPropertyRetrievalExpression *--> "messagePath" FormalExpression
CorrelationPropertyRetrievalExpression --> "messageRef" Message
CorrelationSubscription *--> "correlationPropertyBinding *" CorrelationPropertyBinding
CorrelationSubscription --> "correlationKeyRef" CorrelationKey
DataAssociation --> "sourceRef *" ItemAwareElement
DataAssociation --> "targetRef" ItemAwareElement
DataAssociation *--> "transformation" FormalExpression
DataAssociation *--> "assignment *" Assignment
DataInput "optionalInputRefs *" -- "/ inputSetWithOptional *" InputSet
DataInput "whileExecutingInputRefs *" -- "/ inputSetWithWhileExecuting *" InputSet
DataInput "dataInputRefs *" -- "/ inputSetRefs *" InputSet
DataObjectReference --> "dataObjectRef" DataObject
DataOutput "optionalOutputRefs *" -- "/ outputSetWithOptional *" OutputSet
DataOutput "whileExecutingOutputRefs *" -- "/ outputSetWithWhileExecuting *" OutputSet
DataOutput "dataOutputRefs *" -- "/ outputSetRefs *" OutputSet
DataStoreReference --> "dataStoreRef" DataStore
Definitions *--> "imports *" Import
Definitions *--> "extensions *" Extension
Definitions *--> "rootElements *" RootElement
Definitions *--> "diagrams *" BPMNDiagram
Definitions *--> "relationships *" Relationship
Error --> "structureRef" ItemDefinition
ErrorEventDefinition --> "errorRef" Error
Escalation --> "structureRef" ItemDefinition
EscalationEventDefinition --> "escalationRef" Escalation
Event *--> "properties *" Property
ExclusiveGateway --> "default" SequenceFlow
Extension *--> "definition" ExtensionDefinition
ExtensionAttributeDefinition "/ extensionAttributeDefinitions *" --* "/ extensionDefinition" ExtensionDefinition
ExtensionAttributeValue --> "/ valueRef" EObject
ExtensionAttributeValue --> "/ extensionAttributeDefinition" ExtensionAttributeDefinition
FlowElement *--> "auditing" Auditing
FlowElement *--> "monitoring" Monitoring
FlowElement --> "categoryValueRef *" CategoryValue
FlowElementsContainer *--> "laneSets *" LaneSet
FlowElementsContainer *--> "flowElements *" FlowElement
FlowNode "targetRef" -- "incoming *" SequenceFlow
FlowNode "flowNodeRefs *" -- "/ lanes *" Lane
FlowNode "sourceRef" -- "outgoing *" SequenceFlow
FormalExpression --> "evaluatesToTypeRef" ItemDefinition
GlobalChoreographyTask --> "initiatingParticipantRef" Participant
GlobalTask *--> "resources *" ResourceRole
GlobalUserTask *--> "renderings *" Rendering
Group --> "categoryValueRef" CategoryValue
InclusiveGateway --> "default" SequenceFlow
InputOutputBinding --> "inputDataRef" InputSet
InputOutputBinding --> "operationRef" Operation
InputOutputBinding --> "outputDataRef" OutputSet
InputOutputSpecification *--> "dataInputs *" DataInput
InputOutputSpecification *--> "dataOutputs *" DataOutput
InputOutputSpecification *--> "inputSets *" InputSet
InputOutputSpecification *--> "outputSets *" OutputSet
InputSet "inputSetRefs *" -- "outputSetRefs *" OutputSet
InteractionNode --> "/ incomingConversationLinks *" ConversationLink
InteractionNode --> "/ outgoingConversationLinks *" ConversationLink
Interface *--> "operations *" Operation
Interface --> "implementationRef" EObject
ItemAwareElement *--> "dataState" DataState
ItemAwareElement --> "itemSubjectRef" ItemDefinition
ItemDefinition --> "/ import" Import
ItemDefinition --> "structureRef" EObject
Lane *--> "partitionElement" BaseElement
Lane *--> "childLaneSet" LaneSet
Lane --> "partitionElementRef" BaseElement
LaneSet *--> "lanes *" Lane
Message --> "itemRef" ItemDefinition
MessageEventDefinition --> "operationRef" Operation
MessageEventDefinition --> "messageRef" Message
MessageFlow --> "messageRef" Message
MessageFlow --> "sourceRef" InteractionNode
MessageFlow --> "targetRef" InteractionNode
MessageFlowAssociation --> "innerMessageFlowRef" MessageFlow
MessageFlowAssociation --> "outerMessageFlowRef" MessageFlow
MultiInstanceLoopCharacteristics *--> "loopCardinality" Expression
MultiInstanceLoopCharacteristics --> "loopDataInputRef" ItemAwareElement
MultiInstanceLoopCharacteristics --> "loopDataOutputRef" ItemAwareElement
MultiInstanceLoopCharacteristics *--> "inputDataItem" DataInput
MultiInstanceLoopCharacteristics *--> "outputDataItem" DataOutput
MultiInstanceLoopCharacteristics *--> "complexBehaviorDefinition *" ComplexBehaviorDefinition
MultiInstanceLoopCharacteristics *--> "completionCondition" Expression
MultiInstanceLoopCharacteristics --> "noneBehaviorEventRef" EventDefinition
MultiInstanceLoopCharacteristics --> "oneBehaviorEventRef" EventDefinition
Operation --> "inMessageRef" Message
Operation --> "outMessageRef" Message
Operation --> "errorRefs *" Error
Operation --> "implementationRef" EObject
Participant --> "interfaceRefs *" Interface
Participant --> "endPointRefs *" EndPoint
Participant *--> "participantMultiplicity" ParticipantMultiplicity
Participant --> "processRef" Process
ParticipantAssociation --> "innerParticipantRef" Participant
ParticipantAssociation --> "outerParticipantRef" Participant
PartnerEntity --> "participantRef *" Participant
PartnerRole --> "participantRef *" Participant
Process *--> "auditing" Auditing
Process *--> "monitoring" Monitoring
Process *--> "properties *" Property
Process *--> "artifacts *" Artifact
Process *--> "resources *" ResourceRole
Process *--> "correlationSubscriptions *" CorrelationSubscription
Process --> "supports *" Process
Process --> "definitionalCollaborationRef" Collaboration
ReceiveTask --> "messageRef" Message
ReceiveTask --> "operationRef" Operation
Relationship --> "sources *" EObject
Relationship --> "targets *" EObject
Resource *--> "resourceParameters *" ResourceParameter
ResourceAssignmentExpression *--> "expression" Expression
ResourceParameter --> "type" ItemDefinition
ResourceParameterBinding *--> "expression" Expression
ResourceParameterBinding --> "parameterRef" ResourceParameter
ResourceRole --> "resourceRef" Resource
ResourceRole *--> "resourceParameterBindings *" ResourceParameterBinding
ResourceRole *--> "resourceAssignmentExpression" ResourceAssignmentExpression
SendTask --> "messageRef" Message
SendTask --> "operationRef" Operation
SequenceFlow *--> "conditionExpression" Expression
ServiceTask --> "operationRef" Operation
Signal --> "structureRef" ItemDefinition
SignalEventDefinition --> "signalRef" Signal
StandardLoopCharacteristics *--> "loopCondition" Expression
SubChoreography *--> "artifacts *" Artifact
SubConversation *--> "conversationNodes *" ConversationNode
SubProcess *--> "artifacts *" Artifact
ThrowEvent *--> "dataInputs *" DataInput
ThrowEvent *--> "dataInputAssociation *" DataInputAssociation
ThrowEvent *--> "inputSet" InputSet
ThrowEvent *--> "eventDefinitions *" EventDefinition
ThrowEvent --> "eventDefinitionRefs *" EventDefinition
TimerEventDefinition *--> "timeDate" Expression
TimerEventDefinition *--> "timeDuration" Expression
TimerEventDefinition *--> "timeCycle" Expression
UserTask *--> "renderings *" Rendering
@enduml