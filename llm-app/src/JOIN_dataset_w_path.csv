view_description,meta_1,meta_2,relations
"The Book metamodel has details about each chapter, while the Publication has more information about the publisher and publishing date. This is a simple example of two metamodels with overlapping and complementary information. The view we will create will bring all this information under a single (virtual) metamodel.",1_Book.txt,2_Publication.txt,"{
  ""relations"": ""
[
    {
        ""firstChapter"": [""Publication"", ""Chapter""]
    },
    {
        ""bookChapters"": [""Publication"", ""Chapter""]
    }
]""
}"
"The considered view combines a Runtime Log model (that conforms to a simple trace metamodel), a Source Code model (that conforms to the Java metamodel from MoDisco [8]), a Component model (thatconforms to OMG UML [38]) and a Requirements model (specified in a CSV file, that can be opened in a spreadsheet such as Excel).",1_contentfwk.txt,2_ReqIF.txt,"
{
  ""relations"": ""
[
    {
        ""detailedRequirement"": [""Requirement"", ""SpecObject""]
    }
]""
}"
"I want to follow the evolution of a engineering system.
It shows to different versions of the same system modeled using the CAEX metamodel.
Based on the changes performed in the models, the changes are captured into a model that conforms to a Traces metamodel.
",1_caex.txt,2_ecoreXES.txt,"{
  ""relations"": ""
[
    {
        ""traces"": [""InternalElement"", ""Event""]
    }"
"We propose to build a view that aggregates together all the models seen so far. This allows the system engineer to transparently point to the relevant information (spread in different models) while also allowing him/her to have a better vision of the full picture.

We add a new bidirectional association designComponent, between Trace and Component, which allows the system engineer to navigate from a runtime trace back to the component that emitted it, and from a component to all its emitted traces.

We also rename the features leftLinkEnd (which holds references to B variables) and rightLinkEnd (references to events and traces) to specification and events, making the view more useful to the engineer. We perform such a renaming by filtering the existing features and creating new associations;",1_TraceabilityMetamodel.txt,2_B.txt,"{
  ""relations"": ""
[
    {
        ""specification"": [""TraceabilityLink"", ""Variable""]
    }
]""
}"
"The view is used to show a chain among different models related with the same software system.
The 3 models are a ReqIF model for the requirements, a Log model for the logs and finally a Java model represents the PetStore app developed in Java.",1_UML.txt,2_ReqIF.txt,"{
  ""relations"": ""
[
    {
        ""requirements"": [""Component"", ""SpecObject""]
    }
]""
}"
